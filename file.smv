-- The module below encodes the line. It has an array called line where each
-- element can be either 0 or 1; 0 for black, and 1 for white. So line[3]=0
-- represents that there is a black person at position 3. It also has a
-- boolean array called happy representing whether the happiness status of each
-- position in the line. So happy[2]=TRUE represents that the person at
-- position 2 is happy.
-- The module takes as input old_pos (the current position of the person to
-- move) and new_pos (the new position of the person to move)

MODULE line(old_pos,new_pos)
	VAR
		line  : array 1..4 of 0..1;
		happy : array 1..4 of boolean;

	ASSIGN

-- This is how the colours change in the line when the person in
-- old_pos moves to new_pos. Note that we do not initialise the line
-- array; we let NuSMV to give arbitrary initial colours.

		next(line[1]) :=
			case
				new_pos = 1 : line[old_pos]; 
				new_pos > old_pos & 1 >= old_pos & 1 < new_pos : line[2];
				TRUE : line[1];
			esac;
		next(line[2]) :=
			case
				new_pos =  2 : line[old_pos];
				new_pos > old_pos &  2 >= old_pos &  2 < new_pos : line[3];
				new_pos < old_pos & 2 > new_pos & 2 <= old_pos : line[1];
				TRUE : line[2];
			esac; 
		next(line[3]) :=
			case
				new_pos =  3 : line[old_pos];
				new_pos > old_pos &  3 >= old_pos &  3 < new_pos : line[4];
				new_pos < old_pos & 3 > new_pos & 3 <= old_pos : line[2];
				TRUE : line[3];
			esac; 
		next(line[4]) :=
			case
				new_pos = 4 : line[old_pos]; 
				new_pos < old_pos & 4 > new_pos & 4 <= old_pos : line[3];
				TRUE : line[4];
			esac;

-- We initialise the happiness status.

		init(happy[1]) :=
			case 
				line[1] = 0 & line[1] + line[2] + line[3] - line[1]  <= 1 : TRUE;
				line[1] = 1 & line[1] + line[2] + line[3] - line[1]  >= 1 : TRUE;
				TRUE: FALSE;
			esac;
		init(happy[2]) :=
			case 
				line[2] = 0 & line[1] + line[2] + line[3] + line[4] - line[2]  <= 2 : TRUE;
				line[2] = 1 & line[1] + line[2] + line[3] + line[4] - line[2]  >= 2 : TRUE;
				TRUE: FALSE;
			esac;
		init(happy[3]) :=
			case 
				line[3] = 0 & line[1] + line[2] + line[3] + line[4] - line[3]  <= 2 : TRUE;
				line[3] = 1 & line[1] + line[2] + line[3] + line[4] - line[3]  >= 2 : TRUE;
				TRUE: FALSE;
			esac;
		init(happy[4]) :=
			case 
				line[4] = 0 & line[2] + line[3] + line[4] - line[4]  <= 1 : TRUE;
				line[4] = 1 & line[2] + line[3] + line[4] - line[4]  >= 1 : TRUE;
				TRUE: FALSE;
			esac;


-- This is how the hapiness statuses change in the line when the person in
-- old_pos moves to new_pos.

		next(happy[1]) :=
			case 
				next(line[1]) = 0 & next(line[1]) +next(line[2]) + next(line[3]) - next(line[1])  <= 1 : TRUE;
				next(line[1]) = 1 & next(line[1]) +next(line[2]) + next(line[3]) - next(line[1])  >= 1 : TRUE;
				TRUE: FALSE;
			esac;
		next(happy[2]) :=
			case 
				next(line[2]) = 0 & next(line[1]) +next(line[2]) + next(line[3]) + next(line[4]) - next(line[2])  <= 2 : TRUE;
				next(line[2]) = 1 & next(line[1]) +next(line[2]) + next(line[3]) + next(line[4]) - next(line[2])  >= 2 : TRUE;
				TRUE: FALSE;
			esac;
		next(happy[3]) :=
			case 
				next(line[3]) = 0 & next(line[1]) +next(line[2]) + next(line[3]) + next(line[4]) - next(line[3])  <= 2 : TRUE;
				next(line[3]) = 1 & next(line[1]) +next(line[2]) + next(line[3]) + next(line[4]) - next(line[3])  >= 2 : TRUE;
				TRUE: FALSE;
			esac;
		next(happy[4]) :=
			case 
				next(line[4]) = 0 & next(line[2]) +next(line[3]) + next(line[4]) - next(line[4])  <= 1 : TRUE;
				next(line[4]) = 1 & next(line[2]) +next(line[3]) + next(line[4]) - next(line[4])  >= 1 : TRUE;
				TRUE: FALSE;
			esac;


-- The main module has an old_pos variable. The value of this variable is
-- always arbitrary from 1 to 5. If, at a step, old_pos = 3, then we represent
-- that is the turn of the person in position 3 to move. If this person is
-- already happy (i.e., in the module above happy[3] = TRUE), then it remains
-- in the same position (i.e., we set the new_pos variable below to 3).
-- Otherwise, if the person at position 3 is not happy, then we find the
-- nearest position where it could be happy. We do this in cases, from nearest
-- to furthest. 

MODULE main
	VAR
		old_pos: 1..5;
		new_pos: 1..5;
		persons: line(old_pos,new_pos);

	ASSIGN
		next(new_pos) :=
			case
				old_pos=1 & persons.happy[1] = TRUE : 1;
				old_pos=1 & persons.happy[1] = FALSE & persons.line[1] = 0 & persons.line[1] + persons.line[2] + persons.line[3] + persons.line[4] - persons.line[1] <= 1 : {2};
				old_pos=1 & persons.happy[1] = FALSE & persons.line[1] = 1 & persons.line[1] + persons.line[2] + persons.line[3] + persons.line[4] - persons.line[1] >= 2 : {2};
				old_pos=1 & persons.happy[1] = FALSE & persons.line[1] = 0 & persons.line[1] + persons.line[2] + persons.line[3] + persons.line[4] - persons.line[1] <= 1 : {3};
				old_pos=1 & persons.happy[1] = FALSE & persons.line[1] = 1 & persons.line[1] + persons.line[2] + persons.line[3] + persons.line[4] - persons.line[1] >= 2 : {3};
				old_pos=1 & persons.happy[1] = FALSE & persons.line[1] = 0 & persons.line[3] + persons.line[4] <= 1 : {4};
				old_pos=1 & persons.happy[1] = FALSE & persons.line[1] = 1 & persons.line[3] + persons.line[4] >= 1 : {4};
				old_pos=2 & persons.happy[2] = TRUE : 2;
				old_pos=2 & persons.happy[2] = FALSE & persons.line[2] = 0 & persons.line[1] + persons.line[2] + persons.line[3] - persons.line[2] <= 1 & persons.line[1] + persons.line[2] + persons.line[3] + persons.line[4] - persons.line[2] <= 1 : {1,3};
				old_pos=2 & persons.happy[2] = FALSE & persons.line[2] = 1 & persons.line[1] + persons.line[2] + persons.line[3] - persons.line[2] >= 1 & persons.line[1] + persons.line[2] + persons.line[3] + persons.line[4] - persons.line[2]  >= 2 : {1,3};
				old_pos=2 & persons.happy[2] = FALSE & persons.line[2] = 0 & persons.line[1] + persons.line[2] + persons.line[3] - persons.line[2] <= 1 : {1};
				old_pos=2 & persons.happy[2] = FALSE & persons.line[2] = 1 & persons.line[1] + persons.line[2] + persons.line[3] - persons.line[2] >= 1 : {1};
				old_pos=2 & persons.happy[2] = FALSE & persons.line[2] = 0 & persons.line[1] + persons.line[2] + persons.line[3] + persons.line[4] - persons.line[2] <= 1 : {3};
				old_pos=2 & persons.happy[2] = FALSE & persons.line[2] = 1 & persons.line[1] + persons.line[2] + persons.line[3] + persons.line[4] - persons.line[2] >= 2 : {3};
				old_pos=2 & persons.happy[2] = FALSE & persons.line[2] = 0 & persons.line[2] + persons.line[3] + persons.line[4] - persons.line[2] <= 1 : {4};
				old_pos=2 & persons.happy[2] = FALSE & persons.line[2] = 1 & persons.line[2] + persons.line[3] + persons.line[4] - persons.line[2] >= 1 : {4};
				old_pos=3 & persons.happy[3] = TRUE : 3;
				old_pos=3 & persons.happy[3] = FALSE & persons.line[3] = 0 & persons.line[1] + persons.line[2] + persons.line[3] + persons.line[4] - persons.line[3] <= 1 & persons.line[2] + persons.line[3] + persons.line[4] - persons.line[3] <= 1 : {2,4};
				old_pos=3 & persons.happy[3] = FALSE & persons.line[3] = 1 & persons.line[1] + persons.line[2] + persons.line[3] + persons.line[4] - persons.line[3] >= 2 & persons.line[2] + persons.line[3] + persons.line[4] - persons.line[3]  >= 1 : {2,4};
				old_pos=3 & persons.happy[3] = FALSE & persons.line[3] = 0 & persons.line[1] + persons.line[2] + persons.line[3] + persons.line[4] - persons.line[3] <= 1 : {2};
				old_pos=3 & persons.happy[3] = FALSE & persons.line[3] = 1 & persons.line[1] + persons.line[2] + persons.line[3] + persons.line[4] - persons.line[3] >= 2 : {2};
				old_pos=3 & persons.happy[3] = FALSE & persons.line[3] = 0 & persons.line[2] + persons.line[3] + persons.line[4] - persons.line[3] <= 1 : {4};
				old_pos=3 & persons.happy[3] = FALSE & persons.line[3] = 1 & persons.line[2] + persons.line[3] + persons.line[4] - persons.line[3] >= 1 : {4};
				old_pos=3 & persons.happy[3] = FALSE & persons.line[3] = 0 & persons.line[1] + persons.line[2] + persons.line[3] - persons.line[3] <= 1 : {1};
				old_pos=3 & persons.happy[3] = FALSE & persons.line[3] = 1 & persons.line[1] + persons.line[2] + persons.line[3] - persons.line[3] >= 1 : {1};
				old_pos=4 & persons.happy[4] = TRUE : 4;
				old_pos=4 & persons.happy[4] = FALSE & persons.line[4] = 0 & persons.line[1] + persons.line[2] + persons.line[3] + persons.line[4] - persons.line[4] <= 1 : {3};
				old_pos=4 & persons.happy[4] = FALSE & persons.line[4] = 1 & persons.line[1] + persons.line[2] + persons.line[3] + persons.line[4] - persons.line[4] >= 2 : {3};
				old_pos=4 & persons.happy[4] = FALSE & persons.line[4] = 0 & persons.line[1] + persons.line[2] + persons.line[3] + persons.line[4] - persons.line[4] <= 1 : {2};
				old_pos=4 & persons.happy[4] = FALSE & persons.line[4] = 1 & persons.line[1] + persons.line[2] + persons.line[3] + persons.line[4] - persons.line[4] >= 2 : {2};
				old_pos=4 & persons.happy[4] = FALSE & persons.line[4] = 0 & persons.line[1] + persons.line[2] <= 1 : {1};
				old_pos=4 & persons.happy[4] = FALSE & persons.line[4] = 1 & persons.line[1] + persons.line[2] >= 1 : {1};
				TRUE : old_pos;
		esac;


